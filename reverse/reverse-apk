### APK ###
## links ##
https://tryhackme.com/room/androidhacking101
http://www.javadecompilers.com/apk


## adb ##
adb devices									# list devices
adb shell pm path package_name							# extract apk.
adb shell pm path com.shortstack.hackertracker
adb pull /data/app/com.shortstack.hackertracker/base.apk			# cp from device to local
adb install file.apk								# install apk


## convert ##
jadx -d /path/output /path/apk_or_dex						# convert apk to smali
dex2jar file.apk								# apk to jar file
apktool d file.apk								# convert apk to smali


## GUI ##
jadx-gui


## enum ##
cat AndroidManifest.xml | grep "android:debuggable" --color			# is app debugable
cat AndroidManifest.xml | grep "android:allowBackup" --color			# is app allow backup
cat AndroidManifest.xml | grep "activity" --color				# identify exported activities
cat AndroidManifest.xml | grep "android.permission" -- color			# check apps permission
# weak crypto
grep -r "SecretKeySpec" *
grep -rli "aes" *
grep -rli "iv"
cd /opt/tools/FireBaseScanner && python2 FirebaseMisconfig.py -p file.apk	# check misconfig firebase db


## static analysis framework ##
MARA framework
QARK
MobSF


## obfuscation ##
Proguard and DEXGUARD VS Deguard


## Dynamic Analysis ##
# install burp proxy listener CA
# https://support.portswigger.net/customer/portal/articles/1841101-configuring-an-android-device-to-work-with-burp
openssl x509 -inform PEM -subject_hash -in BurpCA.pem | head -1
cat BurpCA.pem > 9a5ba580.0
openssl x509 -inform PEM -text -in BurpCA.pem -out /dev/null >> 9a5ba580.0
adb root
abd remount
adb push 9a5ba580.0 /system/etc/security/cacerts/
adb shell "chmod 644 /system/etc/security/cacerts/9a5ba580.0"
adb shell "reboot"

# PID Cat (if debug=true)
https://github.com/JakeWharton/pidcat


